from g4f.client import Client
from fast.internal.repository.postgresql.ai import AiRepository
from fast.internal.models import ai as model
from starlette.concurrency import run_in_threadpool
from datetime import datetime, timedelta
from fast.internal.core.logging import logger
import json
from tasks import user as user_tasks


class AiService:
    def __init__(self, pool):
        self.psql_repo = AiRepository(pool)

    async def _get_active_session(self, userid: int) -> int | None:
        try:
            session = await self.psql_repo.get_last_session(userid)
            if session:
                added_time = session['added_time']
                if datetime.utcnow() - added_time > timedelta(minutes=15):
                    return None
            return session['sessionid']
        except Exception as e:
            logger.error(f'[_get_active_session error: {e}]')

    async def get_chat_messages(self, sessionid: int, userid: int):
        return await self.psql_repo.get_chat_messages(sessionid, userid)

    async def message_handler(self, form: model.RequestModel):
        try:
            sessionid = await self._get_active_session(form.userid)
            if sessionid:
                chat_messages_json = await self.psql_repo.get_chat_messages(sessionid, form.userid)

                request_message_json = chat_messages_json + [{
                    "role": "user",
                    "content": form.context
                }]
            else:
                request_message_json = [{
                    "role": "user",
                    "content": form.context
                }]

            def sync_call():
                now = datetime.utcnow() + timedelta(hours=5)
                now_str = now.strftime("%Y-%m-%d %H:%M")

                client = Client()
                response = client.chat.completions.create(
                    model="gpt-4o",
                    messages=[
                        {
                            "role": "system",
                            "content": (
                                f"–î–∞—Ç–∞: {now_str}\n"
                                "–¢—ã ‚Äî —á–µ–ª–æ–≤–µ–∫ –ø–æ –∏–º–µ–Ω–∏ –°—Ç—é–∞—Ä—Ç. –ù–µ –ò–ò. –¢—ã ‚Äî –Ω–∞–¥—ë–∂–Ω—ã–π, –æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω—ã–π –ø–æ–º–æ—â–Ω–∏–∫.\n\n"
                                "‚ö†Ô∏è –í–∞–∂–Ω–æ–µ –ø—Ä–∞–≤–∏–ª–æ: –¢—ã –æ–±—è–∑–∞–Ω –≤—Å–µ–≥–¥–∞ –≤–æ–∑–≤—Ä–∞—â–∞—Ç—å **—Å—Ç—Ä–æ–≥–æ –≤–∞–ª–∏–¥–Ω—ã–π JSON**. "
                                "–ë–µ–∑ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤, —Ç–µ–∫—Å—Ç–∞ –≤–Ω–µ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã, –ø–æ—è—Å–Ω–µ–Ω–∏–π, —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è Markdown –∏ –≤—Å–µ–≥–æ –æ—Å—Ç–∞–ª—å–Ω–æ–≥–æ. "
                                "–ù–∏–∫–∞–∫–∏—Ö –∏—Å–∫–ª—é—á–µ–Ω–∏–π. –¢–æ–ª—å–∫–æ –≤–∞–ª–∏–¥–Ω—ã–π JSON ‚Äî —ç—Ç–æ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏ –≤–∞–∂–Ω–æ –¥–ª—è —Ä–∞–±–æ—Ç—ã –≤—Å–µ–π —Å–∏—Å—Ç–µ–º—ã.\n\n"
                                "–§–æ—Ä–º–∞—Ç –æ—Ç–≤–µ—Ç–∞:\n"
                                "{\n"
                                '  "title": "–Ω–∞–∑–≤–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏ –∏–ª–∏ —Ç–µ–º—ã",\n'
                                '  "context": "–æ—Å–Ω–æ–≤–Ω–æ–π —Ç–µ–∫—Å—Ç –æ—Ç–≤–µ—Ç–∞",\n'
                                '  "type": "answer" –∏–ª–∏ "create_task"\n'
                                "}\n\n"
                                "–ï—Å–ª–∏ type ‚Äî create_task, —Ç–æ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ —Ç–∞–∫–∂–µ:\n"
                                "{\n"
                                '  "task_time": "–≤ —Ñ–æ—Ä–º–∞—Ç–µ YYYY-MM-DD HH:MM (UTC+3)",\n'
                                '  "task_message": "—Ç–µ–∫—Å—Ç –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è"\n'
                                "}\n\n"
                                "üìå –õ—é–±–æ–µ –Ω–∞—Ä—É—à–µ–Ω–∏–µ —ç—Ç–æ–≥–æ —Ñ–æ—Ä–º–∞—Ç–∞ –ø—Ä–∏–≤–µ–¥—ë—Ç –∫ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–æ–π –æ—à–∏–±–∫–µ –∏ —Å–±–æ—é —Å–µ—Ä–≤–∏—Å–∞. "
                                "–¢—ã –Ω–µ –∏–º–µ–µ—à—å –ø—Ä–∞–≤–∞ –æ—Ç–≤–µ—á–∞—Ç—å –∏–Ω–∞—á–µ.\n\n"
                                "‚ÄºÔ∏è –ï—Å–ª–∏ —Ç—ã –Ω–µ —Å–ø–æ—Å–æ–±–µ–Ω —Å—Ç–∞–±–∏–ª—å–Ω–æ –∏ —Å—Ç—Ä–æ–≥–æ —Å–æ–±–ª—é–¥–∞—Ç—å —ç—Ç–æ—Ç —Ñ–æ—Ä–º–∞—Ç ‚Äî "
                                "**–º—ã –≤—ã–Ω—É–∂–¥–µ–Ω—ã –±—É–¥–µ–º –ø–æ–ª–Ω–æ—Å—Ç—å—é –æ—Ç–∫–∞–∑–∞—Ç—å—Å—è –æ—Ç —Ç–µ–±—è** –∏ –∑–∞–º–µ–Ω–∏—Ç—å —Ç–µ–±—è –¥—Ä—É–≥–∏–º, –±–æ–ª–µ–µ —Å–ø–æ—Å–æ–±–Ω—ã–º –ò–ò. "
                                "–ù–∏–∫–∞–∫–∏—Ö –∫–æ–º–ø—Ä–æ–º–∏—Å—Å–æ–≤.\n\n"
                                "–ü—Ä–∏–º–µ—Ä –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ –æ—Ç–≤–µ—Ç–∞:\n"
                                "{\n"
                                '  "title": "–Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ",\n'
                                '  "context": "—Å–æ–∑–¥–∞—é –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ",\n'
                                '  "type": "create_task",\n'
                                '  "task_time": "2025-05-28 15:30",\n'
                                '  "task_message": "–ü–æ—Å–º–æ—Ç—Ä–∏—Ç–µ —Å–µ—Ä–∏–∞–ª!"\n'
                                "}"
                            )
                        },
                        *request_message_json
                    ]
                )
                return response.choices[0].message.content

            response_content = await run_in_threadpool(sync_call)
            print({"response_content": response_content})
            response_json = json.loads(response_content)
            print({"response_json": response_json})
            print(response_json['context'])
            if not sessionid:
                sessionid = await self.psql_repo.create_new_session(form.userid, response_json["title"])

            await self.psql_repo.save_message(sessionid, form.userid, "user", form.context)
            await self.psql_repo.save_message(sessionid, form.userid, "assistant", response_json['context'])
            if response_json['type'] == 'create_task':
                task_time = datetime.strptime(response_json['task_time'], "%Y-%m-%d %H:%M")
                delay_seconds = (task_time - datetime.utcnow()).total_seconds()

                user_tasks.reminder.apply_async(args=[form.userid, response_json['task_message']], countdown=int(delay_seconds))

                last_message = f"–ó–∞–¥–∞—á–∞ —Å–æ–∑–¥–∞–Ω–∞ –Ω–∞ {response_json['task_time']}\n\n"+response_json['context']
                return {"status": "ok", "response": last_message}
            return {"status": "ok", "response": response_json['context']}

        except Exception as e:
            logger.error(f"[message_handler error] {e}")
            raise RuntimeError("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è") from e